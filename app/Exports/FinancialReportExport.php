<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;

class FinancialReportExport implements FromCollection, ShouldAutoSize, WithEvents, WithHeadings, WithMapping, WithTitle
{
    protected $data;

    public function __construct($data)
    {
        $this->data = $data;
    }

    public function collection()
    {
        return collect($this->data['months']);
    }

    public function title(): string
    {
        return 'Financial Report '.$this->data['year'];
    }

    public function headings(): array
    {
        return [
            'Month',
            'Asset Purchases',
            'Depreciation',
            'Total',
        ];
    }

    public function map($row): array
    {
        return [
            $row['month'],
            $row['purchases'],
            $row['depreciation'],
            $row['total'],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet;

                // Set title
                $sheet->mergeCells('A1:D1');
                $sheet->setCellValue('A1', 'Financial Report - '.$this->data['year']);
                $sheet->getStyle('A1')->getFont()->setBold(true)->setSize(16);
                $sheet->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

                // Set headers
                $sheet->fromArray($this->headings(), null, 'A3');
                $sheet->getStyle('A3:D3')->getFont()->setBold(true);
                $sheet->getStyle('A3:D3')->getFill()->setFillType(Fill::FILL_SOLID)->getStartColor()->setARGB('FFD3D3D3');

                // Format numbers
                $lastRow = $this->data['months']->count() + 3;
                $sheet->getStyle("B4:D{$lastRow}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);

                // Add totals row
                $sheet->setCellValue("A{$lastRow}", 'TOTAL');
                $sheet->setCellValue("B{$lastRow}", $this->data['total_purchases']);
                $sheet->setCellValue("C{$lastRow}", $this->data['total_depreciation']);
                $sheet->setCellValue("D{$lastRow}", $this->data['grand_total']);

                // Style totals row
                $sheet->getStyle("A{$lastRow}:D{$lastRow}")->getFont()->setBold(true);
                $sheet->getStyle("A{$lastRow}:D{$lastRow}")->getFill()->setFillType(Fill::FILL_SOLID)->getStartColor()->setARGB('FFE6E6E6');

                // Add borders
                $sheet->getStyle("A3:D{$lastRow}")->getBorders()->getAllBorders()->setBorderStyle(Border::BORDER_THIN);

                // Add generated info
                $sheet->setCellValue('A'.($lastRow + 2), 'Generated by: '.$this->data['generated_by']);
                $sheet->setCellValue('A'.($lastRow + 3), 'Generated at: '.$this->data['generated_at']->format('Y-m-d H:i:s'));

                // Set column widths
                $sheet->getColumnDimension('A')->setWidth(15);
                $sheet->getColumnDimension('B')->setWidth(20);
                $sheet->getColumnDimension('C')->setWidth(20);
                $sheet->getColumnDimension('D')->setWidth(20);

                // Freeze panes
                $sheet->freezePane('A4');
            },
        ];
    }
}
