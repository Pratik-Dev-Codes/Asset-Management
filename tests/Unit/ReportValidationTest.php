<?php\n\nnamespace Tests\\Unit;\n\nuse App\\Models\\Report;\nuse App\\Models\\User;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Tests\\TestCase;\n\nclass ReportValidationTest extends TestCase\n{\n    use RefreshDatabase;\n\n    protected $user;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->user = User::factory()->create();\n    }\n\n    /** @test */\n    public function it_validates_required_fields()\n    {\n        $report = new Report();\n        $validator = Validator::make([], [\n            'name' => 'required',\n            'type' => 'required',\n            'columns' => 'required',\n        ]);\n\n        $this->assertTrue($validator->fails());\n        $this->assertArrayHasKey('name', $validator->errors()->toArray());\n        $this->assertArrayHasKey('type', $validator->errors()->toArray());\n        $this->assertArrayHasKey('columns', $validator->errors()->toArray());\n    }\n\n    /** @test */\n    public function it_validates_report_type()\n    {\n        $valid = Report::isValidType('assets');\n        $this->assertTrue($valid);\n\n        $invalid = Report::isValidType('invalid_type');\n        $this->assertFalse($invalid);\n    }\n\n    /** @test */\n    public function it_validates_columns_against_available_columns()\n    {\n        // Valid columns for assets\n        $valid = Report::validateColumns('assets', ['id', 'name', 'asset_tag']);\n        $this->assertTrue($valid);\n\n        // Invalid column\n        $invalid = Report::validateColumns('assets', ['invalid_column']);\n        $this->assertFalse($invalid);\n    }\n\n    /** @test */\n    public function it_validates_filters()\n    {\n        // Valid filters\n        $validFilters = [\n            'status' => 'active',\n            'date_range' => [\n                'from' => '2023-01-01',\n                'to' => '2023-12-31'\n            ]\n        ];\n        $valid = Report::validateFilters('assets', $validFilters);\n        $this->assertTrue($valid);\n\n        // Invalid filter value\n        $invalidFilters = [\n            'status' => 'invalid_status'\n        ];\n        $invalid = Report::validateFilters('assets', $invalidFilters);\n        $this->assertFalse($invalid);\n    }\n\n    /** @test */\n    public function it_validates_sorting()\n    {\n        // Valid sorting\n        $validSorting = [\n            'created_at' => 'desc',\n            'name' => 'asc'\n        ];\n        $valid = Report::validateSorting('assets', $validSorting);\n        $this->assertTrue($valid);\n\n        // Invalid sort direction\n        $invalidSorting = [\n            'name' => 'invalid_direction'\n        ];\n        $invalid = Report::validateSorting('assets', $invalidSorting);\n        $this->assertFalse($invalid);\n    }\n\n    /** @test */\n    public function it_validates_grouping()\n    {\n        // Valid grouping\n        $validGrouping = ['category_id', 'status'];\n        $valid = Report::validateGrouping('assets', $validGrouping);\n        $this->assertTrue($valid);\n\n        // Invalid grouping field\n        $invalidGrouping = ['invalid_field'];\n        $invalid = Report::validateGrouping('assets', $invalidGrouping);\n        $this->assertFalse($invalid);\n    }\n\n    /** @test */\n    public function it_gets_validation_rules()\n    {\n        $rules = Report::getValidationRules('assets');\n        $this->assertIsArray($rules);\n        $this->assertArrayHasKey('status', $rules);\n        $this->assertArrayHasKey('date_range', $rules);\n    }\n}
